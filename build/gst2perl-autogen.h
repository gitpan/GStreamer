/* This file is automatically generated. Any changes made here will be lost. */

/* This header defines simple perlapi-ish macros for creating SV wrappers
 * and extracting the GPerl value from SV wrappers.  These macros are used
 * by the autogenerated typemaps, and are defined here so that you can use
 * the same logic anywhere in your code (e.g., if you handle the argument
 * stack by hand instead of using the typemap). */

#ifdef GST_TYPE_BIN
  /* GObject derivative GstBin */
# define SvGstBin(sv)	((GstBin*)gperl_get_object_check (sv, GST_TYPE_BIN))
# define newSVGstBin(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstBin GstBin_ornull;
# define SvGstBin_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstBin(sv) : NULL)
# define newSVGstBin_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstBin GstBin_noinc;
#define newSVGstBin_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstBin GstBin_noinc_ornull;
#define newSVGstBin_noinc_ornull(val)	((val) ? newSVGstBin_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_BIN */

#ifdef GST_TYPE_CLOCK
  /* GObject derivative GstClock */
# define SvGstClock(sv)	((GstClock*)gperl_get_object_check (sv, GST_TYPE_CLOCK))
# define newSVGstClock(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstClock GstClock_ornull;
# define SvGstClock_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstClock(sv) : NULL)
# define newSVGstClock_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstClock GstClock_noinc;
#define newSVGstClock_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstClock GstClock_noinc_ornull;
#define newSVGstClock_noinc_ornull(val)	((val) ? newSVGstClock_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_CLOCK */

#ifdef GST_TYPE_ELEMENT
  /* GObject derivative GstElement */
# define SvGstElement(sv)	((GstElement*)gperl_get_object_check (sv, GST_TYPE_ELEMENT))
# define newSVGstElement(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstElement GstElement_ornull;
# define SvGstElement_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstElement(sv) : NULL)
# define newSVGstElement_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstElement GstElement_noinc;
#define newSVGstElement_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstElement GstElement_noinc_ornull;
#define newSVGstElement_noinc_ornull(val)	((val) ? newSVGstElement_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_ELEMENT */

#ifdef GST_TYPE_ELEMENT_FACTORY
  /* GObject derivative GstElementFactory */
# define SvGstElementFactory(sv)	((GstElementFactory*)gperl_get_object_check (sv, GST_TYPE_ELEMENT_FACTORY))
# define newSVGstElementFactory(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstElementFactory GstElementFactory_ornull;
# define SvGstElementFactory_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstElementFactory(sv) : NULL)
# define newSVGstElementFactory_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstElementFactory GstElementFactory_noinc;
#define newSVGstElementFactory_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstElementFactory GstElementFactory_noinc_ornull;
#define newSVGstElementFactory_noinc_ornull(val)	((val) ? newSVGstElementFactory_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_ELEMENT_FACTORY */

#ifdef GST_TYPE_GHOST_PAD
  /* GObject derivative GstGhostPad */
# define SvGstGhostPad(sv)	((GstGhostPad*)gperl_get_object_check (sv, GST_TYPE_GHOST_PAD))
# define newSVGstGhostPad(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstGhostPad GstGhostPad_ornull;
# define SvGstGhostPad_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstGhostPad(sv) : NULL)
# define newSVGstGhostPad_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstGhostPad GstGhostPad_noinc;
#define newSVGstGhostPad_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstGhostPad GstGhostPad_noinc_ornull;
#define newSVGstGhostPad_noinc_ornull(val)	((val) ? newSVGstGhostPad_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_GHOST_PAD */

#ifdef GST_TYPE_INDEX
  /* GObject derivative GstIndex */
# define SvGstIndex(sv)	((GstIndex*)gperl_get_object_check (sv, GST_TYPE_INDEX))
# define newSVGstIndex(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstIndex GstIndex_ornull;
# define SvGstIndex_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstIndex(sv) : NULL)
# define newSVGstIndex_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstIndex GstIndex_noinc;
#define newSVGstIndex_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstIndex GstIndex_noinc_ornull;
#define newSVGstIndex_noinc_ornull(val)	((val) ? newSVGstIndex_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_INDEX */

#ifdef GST_TYPE_INDEX_FACTORY
  /* GObject derivative GstIndexFactory */
# define SvGstIndexFactory(sv)	((GstIndexFactory*)gperl_get_object_check (sv, GST_TYPE_INDEX_FACTORY))
# define newSVGstIndexFactory(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstIndexFactory GstIndexFactory_ornull;
# define SvGstIndexFactory_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstIndexFactory(sv) : NULL)
# define newSVGstIndexFactory_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstIndexFactory GstIndexFactory_noinc;
#define newSVGstIndexFactory_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstIndexFactory GstIndexFactory_noinc_ornull;
#define newSVGstIndexFactory_noinc_ornull(val)	((val) ? newSVGstIndexFactory_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_INDEX_FACTORY */

#ifdef GST_TYPE_OBJECT
  /* GObject derivative GstObject */
# define SvGstObject(sv)	((GstObject*)gperl_get_object_check (sv, GST_TYPE_OBJECT))
# define newSVGstObject(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstObject GstObject_ornull;
# define SvGstObject_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstObject(sv) : NULL)
# define newSVGstObject_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstObject GstObject_noinc;
#define newSVGstObject_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstObject GstObject_noinc_ornull;
#define newSVGstObject_noinc_ornull(val)	((val) ? newSVGstObject_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_OBJECT */

#ifdef GST_TYPE_PAD
  /* GObject derivative GstPad */
# define SvGstPad(sv)	((GstPad*)gperl_get_object_check (sv, GST_TYPE_PAD))
# define newSVGstPad(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstPad GstPad_ornull;
# define SvGstPad_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstPad(sv) : NULL)
# define newSVGstPad_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstPad GstPad_noinc;
#define newSVGstPad_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstPad GstPad_noinc_ornull;
#define newSVGstPad_noinc_ornull(val)	((val) ? newSVGstPad_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_PAD */

#ifdef GST_TYPE_PAD_TEMPLATE
  /* GObject derivative GstPadTemplate */
# define SvGstPadTemplate(sv)	((GstPadTemplate*)gperl_get_object_check (sv, GST_TYPE_PAD_TEMPLATE))
# define newSVGstPadTemplate(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstPadTemplate GstPadTemplate_ornull;
# define SvGstPadTemplate_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstPadTemplate(sv) : NULL)
# define newSVGstPadTemplate_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstPadTemplate GstPadTemplate_noinc;
#define newSVGstPadTemplate_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstPadTemplate GstPadTemplate_noinc_ornull;
#define newSVGstPadTemplate_noinc_ornull(val)	((val) ? newSVGstPadTemplate_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_PAD_TEMPLATE */

#ifdef GST_TYPE_PIPELINE
  /* GObject derivative GstPipeline */
# define SvGstPipeline(sv)	((GstPipeline*)gperl_get_object_check (sv, GST_TYPE_PIPELINE))
# define newSVGstPipeline(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstPipeline GstPipeline_ornull;
# define SvGstPipeline_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstPipeline(sv) : NULL)
# define newSVGstPipeline_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstPipeline GstPipeline_noinc;
#define newSVGstPipeline_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstPipeline GstPipeline_noinc_ornull;
#define newSVGstPipeline_noinc_ornull(val)	((val) ? newSVGstPipeline_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_PIPELINE */

#ifdef GST_TYPE_PLUGIN_FEATURE
  /* GObject derivative GstPluginFeature */
# define SvGstPluginFeature(sv)	((GstPluginFeature*)gperl_get_object_check (sv, GST_TYPE_PLUGIN_FEATURE))
# define newSVGstPluginFeature(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstPluginFeature GstPluginFeature_ornull;
# define SvGstPluginFeature_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstPluginFeature(sv) : NULL)
# define newSVGstPluginFeature_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstPluginFeature GstPluginFeature_noinc;
#define newSVGstPluginFeature_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstPluginFeature GstPluginFeature_noinc_ornull;
#define newSVGstPluginFeature_noinc_ornull(val)	((val) ? newSVGstPluginFeature_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_PLUGIN_FEATURE */

#ifdef GST_TYPE_REAL_PAD
  /* GObject derivative GstRealPad */
# define SvGstRealPad(sv)	((GstRealPad*)gperl_get_object_check (sv, GST_TYPE_REAL_PAD))
# define newSVGstRealPad(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstRealPad GstRealPad_ornull;
# define SvGstRealPad_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstRealPad(sv) : NULL)
# define newSVGstRealPad_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstRealPad GstRealPad_noinc;
#define newSVGstRealPad_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstRealPad GstRealPad_noinc_ornull;
#define newSVGstRealPad_noinc_ornull(val)	((val) ? newSVGstRealPad_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_REAL_PAD */

#ifdef GST_TYPE_REGISTRY
  /* GObject derivative GstRegistry */
# define SvGstRegistry(sv)	((GstRegistry*)gperl_get_object_check (sv, GST_TYPE_REGISTRY))
# define newSVGstRegistry(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstRegistry GstRegistry_ornull;
# define SvGstRegistry_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstRegistry(sv) : NULL)
# define newSVGstRegistry_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstRegistry GstRegistry_noinc;
#define newSVGstRegistry_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstRegistry GstRegistry_noinc_ornull;
#define newSVGstRegistry_noinc_ornull(val)	((val) ? newSVGstRegistry_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_REGISTRY */

#ifdef GST_TYPE_SCHEDULER
  /* GObject derivative GstScheduler */
# define SvGstScheduler(sv)	((GstScheduler*)gperl_get_object_check (sv, GST_TYPE_SCHEDULER))
# define newSVGstScheduler(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstScheduler GstScheduler_ornull;
# define SvGstScheduler_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstScheduler(sv) : NULL)
# define newSVGstScheduler_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstScheduler GstScheduler_noinc;
#define newSVGstScheduler_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstScheduler GstScheduler_noinc_ornull;
#define newSVGstScheduler_noinc_ornull(val)	((val) ? newSVGstScheduler_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_SCHEDULER */

#ifdef GST_TYPE_SCHEDULER_FACTORY
  /* GObject derivative GstSchedulerFactory */
# define SvGstSchedulerFactory(sv)	((GstSchedulerFactory*)gperl_get_object_check (sv, GST_TYPE_SCHEDULER_FACTORY))
# define newSVGstSchedulerFactory(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstSchedulerFactory GstSchedulerFactory_ornull;
# define SvGstSchedulerFactory_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstSchedulerFactory(sv) : NULL)
# define newSVGstSchedulerFactory_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstSchedulerFactory GstSchedulerFactory_noinc;
#define newSVGstSchedulerFactory_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstSchedulerFactory GstSchedulerFactory_noinc_ornull;
#define newSVGstSchedulerFactory_noinc_ornull(val)	((val) ? newSVGstSchedulerFactory_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_SCHEDULER_FACTORY */

#ifdef GST_TYPE_THREAD
  /* GObject derivative GstThread */
# define SvGstThread(sv)	((GstThread*)gperl_get_object_check (sv, GST_TYPE_THREAD))
# define newSVGstThread(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GstThread GstThread_ornull;
# define SvGstThread_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstThread(sv) : NULL)
# define newSVGstThread_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GstThread GstThread_noinc;
#define newSVGstThread_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GstThread GstThread_noinc_ornull;
#define newSVGstThread_noinc_ornull(val)	((val) ? newSVGstThread_noinc(val) : &PL_sv_undef)
#endif /* GST_TYPE_THREAD */

#ifdef GST_TYPE_BUFFER
  /* GBoxed GstBuffer */
  typedef GstBuffer GstBuffer_ornull;
# define SvGstBuffer(sv)	(gperl_get_boxed_check ((sv), GST_TYPE_BUFFER))
# define SvGstBuffer_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstBuffer (sv) : NULL)
  typedef GstBuffer GstBuffer_own;
  typedef GstBuffer GstBuffer_copy;
  typedef GstBuffer GstBuffer_own_ornull;
# define newSVGstBuffer(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_BUFFER, FALSE))
# define newSVGstBuffer_ornull(val)	((val) ? newSVGstBuffer(val) : &PL_sv_undef)
# define newSVGstBuffer_own(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_BUFFER, TRUE))
# define newSVGstBuffer_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GST_TYPE_BUFFER))
# define newSVGstBuffer_own_ornull(val)	((val) ? newSVGstBuffer_own(val) : &PL_sv_undef)
#endif /* GST_TYPE_BUFFER */

#ifdef GST_TYPE_CAPS
  /* GBoxed GstCaps */
  typedef GstCaps GstCaps_ornull;
# define SvGstCaps(sv)	(gperl_get_boxed_check ((sv), GST_TYPE_CAPS))
# define SvGstCaps_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstCaps (sv) : NULL)
  typedef GstCaps GstCaps_own;
  typedef GstCaps GstCaps_copy;
  typedef GstCaps GstCaps_own_ornull;
# define newSVGstCaps(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_CAPS, FALSE))
# define newSVGstCaps_ornull(val)	((val) ? newSVGstCaps(val) : &PL_sv_undef)
# define newSVGstCaps_own(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_CAPS, TRUE))
# define newSVGstCaps_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GST_TYPE_CAPS))
# define newSVGstCaps_own_ornull(val)	((val) ? newSVGstCaps_own(val) : &PL_sv_undef)
#endif /* GST_TYPE_CAPS */

#ifdef GST_TYPE_DATA
  /* GBoxed GstData */
  typedef GstData GstData_ornull;
# define SvGstData(sv)	(gperl_get_boxed_check ((sv), GST_TYPE_DATA))
# define SvGstData_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstData (sv) : NULL)
  typedef GstData GstData_own;
  typedef GstData GstData_copy;
  typedef GstData GstData_own_ornull;
# define newSVGstData(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_DATA, FALSE))
# define newSVGstData_ornull(val)	((val) ? newSVGstData(val) : &PL_sv_undef)
# define newSVGstData_own(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_DATA, TRUE))
# define newSVGstData_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GST_TYPE_DATA))
# define newSVGstData_own_ornull(val)	((val) ? newSVGstData_own(val) : &PL_sv_undef)
#endif /* GST_TYPE_DATA */

#ifdef GST_TYPE_EVENT
  /* GBoxed GstEvent */
  typedef GstEvent GstEvent_ornull;
# define SvGstEvent(sv)	(gperl_get_boxed_check ((sv), GST_TYPE_EVENT))
# define SvGstEvent_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstEvent (sv) : NULL)
  typedef GstEvent GstEvent_own;
  typedef GstEvent GstEvent_copy;
  typedef GstEvent GstEvent_own_ornull;
# define newSVGstEvent(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_EVENT, FALSE))
# define newSVGstEvent_ornull(val)	((val) ? newSVGstEvent(val) : &PL_sv_undef)
# define newSVGstEvent_own(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_EVENT, TRUE))
# define newSVGstEvent_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GST_TYPE_EVENT))
# define newSVGstEvent_own_ornull(val)	((val) ? newSVGstEvent_own(val) : &PL_sv_undef)
#endif /* GST_TYPE_EVENT */

#ifdef GST_TYPE_INDEX_ENTRY
  /* GBoxed GstIndexEntry */
  typedef GstIndexEntry GstIndexEntry_ornull;
# define SvGstIndexEntry(sv)	(gperl_get_boxed_check ((sv), GST_TYPE_INDEX_ENTRY))
# define SvGstIndexEntry_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstIndexEntry (sv) : NULL)
  typedef GstIndexEntry GstIndexEntry_own;
  typedef GstIndexEntry GstIndexEntry_copy;
  typedef GstIndexEntry GstIndexEntry_own_ornull;
# define newSVGstIndexEntry(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_INDEX_ENTRY, FALSE))
# define newSVGstIndexEntry_ornull(val)	((val) ? newSVGstIndexEntry(val) : &PL_sv_undef)
# define newSVGstIndexEntry_own(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_INDEX_ENTRY, TRUE))
# define newSVGstIndexEntry_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GST_TYPE_INDEX_ENTRY))
# define newSVGstIndexEntry_own_ornull(val)	((val) ? newSVGstIndexEntry_own(val) : &PL_sv_undef)
#endif /* GST_TYPE_INDEX_ENTRY */

#ifdef GST_TYPE_PLUGIN
  /* GBoxed GstPlugin */
  typedef GstPlugin GstPlugin_ornull;
# define SvGstPlugin(sv)	(gperl_get_boxed_check ((sv), GST_TYPE_PLUGIN))
# define SvGstPlugin_ornull(sv)	(((sv) && SvOK (sv)) ? SvGstPlugin (sv) : NULL)
  typedef GstPlugin GstPlugin_own;
  typedef GstPlugin GstPlugin_copy;
  typedef GstPlugin GstPlugin_own_ornull;
# define newSVGstPlugin(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_PLUGIN, FALSE))
# define newSVGstPlugin_ornull(val)	((val) ? newSVGstPlugin(val) : &PL_sv_undef)
# define newSVGstPlugin_own(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_PLUGIN, TRUE))
# define newSVGstPlugin_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GST_TYPE_PLUGIN))
# define newSVGstPlugin_own_ornull(val)	((val) ? newSVGstPlugin_own(val) : &PL_sv_undef)
#endif /* GST_TYPE_PLUGIN */

#ifdef GST_TYPE_G_ERROR
  /* GBoxed GError */
  typedef GError GError_ornull;
# define SvGError(sv)	(gperl_get_boxed_check ((sv), GST_TYPE_G_ERROR))
# define SvGError_ornull(sv)	(((sv) && SvOK (sv)) ? SvGError (sv) : NULL)
  typedef GError GError_own;
  typedef GError GError_copy;
  typedef GError GError_own_ornull;
# define newSVGError(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_G_ERROR, FALSE))
# define newSVGError_ornull(val)	((val) ? newSVGError(val) : &PL_sv_undef)
# define newSVGError_own(val)	(gperl_new_boxed ((gpointer) (val), GST_TYPE_G_ERROR, TRUE))
# define newSVGError_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GST_TYPE_G_ERROR))
# define newSVGError_own_ornull(val)	((val) ? newSVGError_own(val) : &PL_sv_undef)
#endif /* GST_TYPE_G_ERROR */

#ifdef GST_TYPE_CLOCK_RETURN
  /* GEnum GstClockReturn */
# define SvGstClockReturn(sv)	((GstClockReturn)gperl_convert_enum (GST_TYPE_CLOCK_RETURN, sv))
# define newSVGstClockReturn(val)	(gperl_convert_back_enum (GST_TYPE_CLOCK_RETURN, val))
#endif /* GST_TYPE_CLOCK_RETURN */

#ifdef GST_TYPE_ELEMENT_STATE_RETURN
  /* GEnum GstElementStateReturn */
# define SvGstElementStateReturn(sv)	((GstElementStateReturn)gperl_convert_enum (GST_TYPE_ELEMENT_STATE_RETURN, sv))
# define newSVGstElementStateReturn(val)	(gperl_convert_back_enum (GST_TYPE_ELEMENT_STATE_RETURN, val))
#endif /* GST_TYPE_ELEMENT_STATE_RETURN */

#ifdef GST_TYPE_EVENT_TYPE
  /* GEnum GstEventType */
# define SvGstEventType(sv)	((GstEventType)gperl_convert_enum (GST_TYPE_EVENT_TYPE, sv))
# define newSVGstEventType(val)	(gperl_convert_back_enum (GST_TYPE_EVENT_TYPE, val))
#endif /* GST_TYPE_EVENT_TYPE */

#ifdef GST_TYPE_FORMAT
  /* GEnum GstFormat */
# define SvGstFormat(sv)	((GstFormat)gperl_convert_enum (GST_TYPE_FORMAT, sv))
# define newSVGstFormat(val)	(gperl_convert_back_enum (GST_TYPE_FORMAT, val))
#endif /* GST_TYPE_FORMAT */

#ifdef GST_TYPE_INDEX_CERTAINTY
  /* GEnum GstIndexCertainty */
# define SvGstIndexCertainty(sv)	((GstIndexCertainty)gperl_convert_enum (GST_TYPE_INDEX_CERTAINTY, sv))
# define newSVGstIndexCertainty(val)	(gperl_convert_back_enum (GST_TYPE_INDEX_CERTAINTY, val))
#endif /* GST_TYPE_INDEX_CERTAINTY */

#ifdef GST_TYPE_INDEX_LOOKUP_METHOD
  /* GEnum GstIndexLookupMethod */
# define SvGstIndexLookupMethod(sv)	((GstIndexLookupMethod)gperl_convert_enum (GST_TYPE_INDEX_LOOKUP_METHOD, sv))
# define newSVGstIndexLookupMethod(val)	(gperl_convert_back_enum (GST_TYPE_INDEX_LOOKUP_METHOD, val))
#endif /* GST_TYPE_INDEX_LOOKUP_METHOD */

#ifdef GST_TYPE_PAD_DIRECTION
  /* GEnum GstPadDirection */
# define SvGstPadDirection(sv)	((GstPadDirection)gperl_convert_enum (GST_TYPE_PAD_DIRECTION, sv))
# define newSVGstPadDirection(val)	(gperl_convert_back_enum (GST_TYPE_PAD_DIRECTION, val))
#endif /* GST_TYPE_PAD_DIRECTION */

#ifdef GST_TYPE_PAD_LINK_RETURN
  /* GEnum GstPadLinkReturn */
# define SvGstPadLinkReturn(sv)	((GstPadLinkReturn)gperl_convert_enum (GST_TYPE_PAD_LINK_RETURN, sv))
# define newSVGstPadLinkReturn(val)	(gperl_convert_back_enum (GST_TYPE_PAD_LINK_RETURN, val))
#endif /* GST_TYPE_PAD_LINK_RETURN */

#ifdef GST_TYPE_PAD_PRESENCE
  /* GEnum GstPadPresence */
# define SvGstPadPresence(sv)	((GstPadPresence)gperl_convert_enum (GST_TYPE_PAD_PRESENCE, sv))
# define newSVGstPadPresence(val)	(gperl_convert_back_enum (GST_TYPE_PAD_PRESENCE, val))
#endif /* GST_TYPE_PAD_PRESENCE */

#ifdef GST_TYPE_QUERY_TYPE
  /* GEnum GstQueryType */
# define SvGstQueryType(sv)	((GstQueryType)gperl_convert_enum (GST_TYPE_QUERY_TYPE, sv))
# define newSVGstQueryType(val)	(gperl_convert_back_enum (GST_TYPE_QUERY_TYPE, val))
#endif /* GST_TYPE_QUERY_TYPE */

#ifdef GST_TYPE_URI_TYPE
  /* GEnum GstURIType */
# define SvGstURIType(sv)	((GstURIType)gperl_convert_enum (GST_TYPE_URI_TYPE, sv))
# define newSVGstURIType(val)	(gperl_convert_back_enum (GST_TYPE_URI_TYPE, val))
#endif /* GST_TYPE_URI_TYPE */

#ifdef GST_TYPE_ASSOC_FLAGS
  /* GFlags GstAssocFlags */
# define SvGstAssocFlags(sv)	((GstAssocFlags)gperl_convert_flags (GST_TYPE_ASSOC_FLAGS, sv))
# define newSVGstAssocFlags(val)	(gperl_convert_back_flags (GST_TYPE_ASSOC_FLAGS, val))
#endif /* GST_TYPE_ASSOC_FLAGS */

#ifdef GST_TYPE_ELEMENT_STATE
  /* GFlags GstElementState */
# define SvGstElementState(sv)	((GstElementState)gperl_convert_flags (GST_TYPE_ELEMENT_STATE, sv))
# define newSVGstElementState(val)	(gperl_convert_back_flags (GST_TYPE_ELEMENT_STATE, val))
#endif /* GST_TYPE_ELEMENT_STATE */

#ifdef GST_TYPE_EVENT_FLAG
  /* GFlags GstEventFlag */
# define SvGstEventFlag(sv)	((GstEventFlag)gperl_convert_flags (GST_TYPE_EVENT_FLAG, sv))
# define newSVGstEventFlag(val)	(gperl_convert_back_flags (GST_TYPE_EVENT_FLAG, val))
#endif /* GST_TYPE_EVENT_FLAG */

#ifdef GST_TYPE_REGISTRY_FLAGS
  /* GFlags GstRegistryFlags */
# define SvGstRegistryFlags(sv)	((GstRegistryFlags)gperl_convert_flags (GST_TYPE_REGISTRY_FLAGS, sv))
# define newSVGstRegistryFlags(val)	(gperl_convert_back_flags (GST_TYPE_REGISTRY_FLAGS, val))
#endif /* GST_TYPE_REGISTRY_FLAGS */

#ifdef GST_TYPE_REGISTRY_RETURN
  /* GFlags GstRegistryReturn */
# define SvGstRegistryReturn(sv)	((GstRegistryReturn)gperl_convert_flags (GST_TYPE_REGISTRY_RETURN, sv))
# define newSVGstRegistryReturn(val)	(gperl_convert_back_flags (GST_TYPE_REGISTRY_RETURN, val))
#endif /* GST_TYPE_REGISTRY_RETURN */

#ifdef GST_TYPE_SEEK_TYPE
  /* GFlags GstSeekType */
# define SvGstSeekType(sv)	((GstSeekType)gperl_convert_flags (GST_TYPE_SEEK_TYPE, sv))
# define newSVGstSeekType(val)	(gperl_convert_back_flags (GST_TYPE_SEEK_TYPE, val))
#endif /* GST_TYPE_SEEK_TYPE */
